  CREATE TABLE "ACTOR" 
   (	"ACTOR_ID" NUMBER DEFAULT "WKSP_WORKSTUFF"."T_ACTORS_SEQ"."NEXTVAL", 
	"FIRST_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"LAST_NAME" VARCHAR2(255 CHAR), 
	"ACTOR_NATIONALITY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"ACTOR_DOB" DATE, 
	 CONSTRAINT "T_ACTORS_CON" PRIMARY KEY ("ACTOR_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DEPT" 
   (	"DEPTNO" NUMBER(2,0), 
	"DNAME" VARCHAR2(14), 
	"LOC" VARCHAR2(13), 
	 PRIMARY KEY ("DEPTNO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DIRECTOR" 
   (	"DIRECTOR_ID" NUMBER, 
	"FIRST_NAME" VARCHAR2(255 CHAR), 
	"LAST_NAME" VARCHAR2(255 CHAR), 
	"DIRECTOR_NATIONALITY" VARCHAR2(255 CHAR), 
	"DIRECTOR_DOB" DATE, 
	 CONSTRAINT "T_DIRECTORS_CON" PRIMARY KEY ("DIRECTOR_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "GENRE" 
   (	"GENRE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"GENRE_NAME" VARCHAR2(255 CHAR), 
	 CONSTRAINT "T_GENERS_PK" PRIMARY KEY ("GENRE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MOVIE" 
   (	"MOVIE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TITLE" VARCHAR2(500 CHAR) NOT NULL ENABLE, 
	"RELEASE_YEAR" NUMBER NOT NULL ENABLE, 
	"RATING" NUMBER, 
	"MOVIE_LENGTH" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"TRAILER_LINK" VARCHAR2(2000), 
	"MOVIE_POSTER_LINK" VARCHAR2(2000), 
	 CONSTRAINT "T_MOVIES_PK" PRIMARY KEY ("MOVIE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MOVIE_DATA" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"TITLE" VARCHAR2(255), 
	"YEAR" NUMBER, 
	"SUMMARY" VARCHAR2(4000), 
	"SHORT_SUMMARY" VARCHAR2(4000), 
	"GENRES" VARCHAR2(255), 
	"IMDB_ID" VARCHAR2(50), 
	"RUNTIME" NUMBER, 
	"YOUTUBE_TRAILER" VARCHAR2(50), 
	"RATING" NUMBER, 
	"MOVIE_POSTER" VARCHAR2(255), 
	"DIRECTOR" VARCHAR2(50), 
	"WRITERS" VARCHAR2(50), 
	"CAST" VARCHAR2(255), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "R_ACTS_IN" 
   (	"MOVIE_ID" NUMBER NOT NULL ENABLE, 
	"ACTOR_ID" NUMBER NOT NULL ENABLE, 
	"ROLE" VARCHAR2(250)
   ) ;

  CREATE TABLE "R_DIRECTS_MOVIE" 
   (	"DIRECTOR_ID" NUMBER, 
	"MOVIE_ID" NUMBER
   ) ;

  CREATE TABLE "R_HAS_GENRE" 
   (	"MOVIE_ID" NUMBER, 
	"GENRE_ID" NUMBER
   ) ;

  CREATE TABLE "USERS_AUTH" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FULL_NAME" VARCHAR2(500 CHAR) NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(250 CHAR) NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(15 CHAR) NOT NULL ENABLE, 
	"DOB" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(250 CHAR), 
	"CREATED_ON" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"UPDATED_BY" VARCHAR2(250 CHAR), 
	"UPDATED_ON" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	 CONSTRAINT "USERS_AUTH_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_T_ACTORS" 
before
insert on  "ACTOR"
for each row
begin
  select  T_ACTORS_SEQ.NEXTVAL into :new.actor_id from dual;
end;
/
ALTER TRIGGER "BI_T_ACTORS" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEPT_TRG1" 
              before insert on dept
              for each row
              begin
                  if :new.deptno is null then
                      select dept_seq.nextval into :new.deptno from sys.dual;
                 end if;
              end;
/
ALTER TRIGGER "DEPT_TRG1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "T_DIRECTORS_T" 
before
insert  on "DIRECTOR"
for each row
begin
  select  T_DIRECTORS_SEQ.NEXTVAL into :new.director_id from dual;
end;
/
ALTER TRIGGER "T_DIRECTORS_T" ENABLE;

  ALTER TABLE "R_ACTS_IN" ADD CONSTRAINT "T_MOVIE_ACTORS_CON" FOREIGN KEY ("ACTOR_ID")
	  REFERENCES "ACTOR" ("ACTOR_ID") ENABLE;
  ALTER TABLE "R_ACTS_IN" ADD CONSTRAINT "T_MOVIE_ACTORS_CON_1" FOREIGN KEY ("MOVIE_ID")
	  REFERENCES "MOVIE" ("MOVIE_ID") ENABLE;

  ALTER TABLE "R_DIRECTS_MOVIE" ADD CONSTRAINT "R_DIRECTS_MOVIE_CON" FOREIGN KEY ("MOVIE_ID")
	  REFERENCES "MOVIE" ("MOVIE_ID") ENABLE;

  ALTER TABLE "R_HAS_GENRE" ADD CONSTRAINT "R_HAS_GENRE_CON" FOREIGN KEY ("MOVIE_ID")
	  REFERENCES "MOVIE" ("MOVIE_ID") ENABLE;

   COMMENT ON TABLE "USERS_AUTH"  IS 'This table contains Lights Out application users'' details';
create or replace FUNCTION lights_out_login_user(p_username IN VARCHAR2, p_password IN VARCHAR2) RETURN BOOLEAN IS
  v_count NUMBER;
BEGIN
  -- Check if the username and password match in the USERS_AUTH table
  SELECT COUNT(*) INTO v_count
  FROM USERS_AUTH
  WHERE lower(USERNAME) = lower(p_username) AND PASSWORD = p_password;

  -- If a record is found, return true; otherwise, return false
  IF v_count > 0 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  -- Handle any exceptions that might occur
  WHEN OTHERS THEN
    RETURN FALSE;
END;
/
create or replace FUNCTION my_authentication(
    p_username IN USERS_AUTH.USERNAME%TYPE,
    p_password IN USERS_AUTH.PASSWORD%TYPE
) RETURN BOOLEAN
IS
    l_count INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO l_count
    FROM USERS_AUTH
    WHERE PASSWORD = p_password AND upper(USERNAME) = upper(p_username);

    IF l_count > 0 THEN
        -- Valid login credentials
        RETURN TRUE;
    ELSE
        -- Invalid login credentials
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- Handle exceptions if necessary
        RETURN FALSE;
END;
/
create or replace FUNCTION validate_login(
    p_username IN VARCHAR2,
    p_password IN VARCHAR2
) RETURN BOOLEAN IS
    l_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO l_count
    FROM USERS_AUTH
    WHERE USERNAME = p_username
    AND PASSWORD = p_password;

    IF l_count > 0 THEN
        RETURN TRUE; -- Valid login credentials
    ELSE
        RETURN FALSE; -- Invalid login credentials
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE; -- Invalid login credentials
    WHEN OTHERS THEN
        RAISE; -- Propagate the exception
END;
/



















  CREATE UNIQUE INDEX "T_ACTORS_CON" ON "ACTOR" ("ACTOR_ID") 
  ;

  CREATE UNIQUE INDEX "T_DIRECTORS_CON" ON "DIRECTOR" ("DIRECTOR_ID") 
  ;

  CREATE UNIQUE INDEX "T_GENERS_PK" ON "GENRE" ("GENRE_ID") 
  ;

  CREATE UNIQUE INDEX "T_MOVIES_PK" ON "MOVIE" ("MOVIE_ID") 
  ;

  CREATE UNIQUE INDEX "USERS_AUTH_PK" ON "USERS_AUTH" ("ID") 
  ;











































   CREATE SEQUENCE  "T_ACTORS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "T_DIRECTORS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;





















create or replace TRIGGER "T_DIRECTORS_T"
before
insert  on "DIRECTOR"
for each row
begin
  select  T_DIRECTORS_SEQ.NEXTVAL into :new.director_id from dual;
end;ï¿½
/

  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_T_ACTORS" 
before
insert on  "ACTOR"
for each row
begin
  select  T_ACTORS_SEQ.NEXTVAL into :new.actor_id from dual;
end;
/
ALTER TRIGGER "BI_T_ACTORS" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEPT_TRG1" 
              before insert on dept
              for each row
              begin
                  if :new.deptno is null then
                      select dept_seq.nextval into :new.deptno from sys.dual;
                 end if;
              end;
/
ALTER TRIGGER "DEPT_TRG1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "T_DIRECTORS_T" 
before
insert  on "DIRECTOR"
for each row
begin
  select  T_DIRECTORS_SEQ.NEXTVAL into :new.director_id from dual;
end;
/
ALTER TRIGGER "T_DIRECTORS_T" ENABLE;

   COMMENT ON TABLE "USERS_AUTH"  IS 'This table contains Lights Out application users'' details';























  CREATE UNIQUE INDEX "T_ACTORS_CON" ON "ACTOR" ("ACTOR_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_T_ACTORS" 
before
insert on  "ACTOR"
for each row
begin
  select  T_ACTORS_SEQ.NEXTVAL into :new.actor_id from dual;
end;
/
ALTER TRIGGER "BI_T_ACTORS" ENABLE;

  CREATE UNIQUE INDEX "SYS_C00142454568" ON "DEPT" ("DEPTNO") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "DEPT_TRG1" 
              before insert on dept
              for each row
              begin
                  if :new.deptno is null then
                      select dept_seq.nextval into :new.deptno from sys.dual;
                 end if;
              end;
/
ALTER TRIGGER "DEPT_TRG1" ENABLE;

  CREATE UNIQUE INDEX "T_DIRECTORS_CON" ON "DIRECTOR" ("DIRECTOR_ID") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "T_DIRECTORS_T" 
before
insert  on "DIRECTOR"
for each row
begin
  select  T_DIRECTORS_SEQ.NEXTVAL into :new.director_id from dual;
end;
/
ALTER TRIGGER "T_DIRECTORS_T" ENABLE;

  CREATE UNIQUE INDEX "T_GENERS_PK" ON "GENRE" ("GENRE_ID") 
  ;

  CREATE UNIQUE INDEX "T_MOVIES_PK" ON "MOVIE" ("MOVIE_ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C00141528755" ON "MOVIE_DATA" ("ID") 
  ;

  CREATE UNIQUE INDEX "USERS_AUTH_PK" ON "USERS_AUTH" ("ID") 
  ;

   COMMENT ON TABLE "USERS_AUTH"  IS 'This table contains Lights Out application users'' details';









































